---
- name: Load OS specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
        - defaults.yml
      paths:
        - ../vars

- name: Install epel
  yum: name={{ epel_url }} state=present update_cache=yes
  when: ansible_os_family == "RedHat"

- name: Ensure required packages are installed (yum)
  yum:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items: "{{ packages }}"
  when: ansible_os_family == "RedHat" and "{{ packages|length > 0 }}"

- name: Ensure required packages are installed (apt)
  apt:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items: "{{ packages }}"
  when: ansible_os_family == "Debian" and "{{ packages|length > 0 }}"

- name: Upgrade all packages (yum)
  yum: name=* state=latest
  when: ansible_os_family == "RedHat" and "{{ packages|length > 0 }}"

- name: Upgrade all packages (apt)
  apt: upgrade=dist
  when: ansible_os_family == "Debian" and "{{ packages|length > 0 }}"

- include: spark_stack.yml
  when: spark_stack and ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

- name: Make sure the NTP service is stopped
  service: name={{ ntp_service }} state=stopped

- name: Force NTP sync
  command: "{{ ntp_sync }}"

- name: Start the NTP service
  service: name={{ ntp_service }} state=started enabled=yes

- name: Disable MySQL skip-name-resolve if present
  lineinfile: dest=/etc/my.cnf
              regexp="^skip[-_]name[-_]resolve"
              state=absent

- name: Set nofile limits
  lineinfile: dest=/etc/security/limits.conf
              insertbefore="^# End of file"
              state=present
              line="{{ item }}"
  with_items:
    - "* soft nofile 32768"
    - "* hard nofile 32768"

- name: Set nproc limits
  lineinfile: dest=/etc/security/limits.d/90-nproc.conf
              insertafter=EOF
              state=present
              create=yes
              line="{{ item }}"
              mode=0644
  with_items:
    - "* soft nproc 32768"
    - "* hard nproc 32768"

- name: Set swappiness to 1
  sysctl: name=vm.swappiness value=1 state=present ignoreerrors=yes

- name: Set the tuned profile
  copy: src=tuned.conf
        dest=/etc/tuned/hadoop/
        mode=0755
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

- name: Activate the tuned profile
  shell: tuned-adm profile hadoop
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

- name: Get number of kernels in grub.conf
  shell: grep -E "^[[:blank:]]*kernel" /boot/grub/grub.conf | grep -v transparent_hugepage; exit 0
  register: grep_result
  when: ansible_os_family == "RedHat" and (ansible_distribution == "Amazon" or ansible_distribution_major_version == "6")
  ignore_errors: true

- name: Disable Transparent Huge Pages in Grub 1
  lineinfile: dest=/boot/grub/grub.conf
              backrefs=True
              state=present
              regexp='(^\s*kernel(\s+(?!transparent_hugepage=never)[\w=/\-\.\,]+)*)\s*$'
              line='\1 transparent_hugepage=never'
  register: result
  with_items: "{{ grep_result.stdout_lines }}"
  when: ansible_os_family == "RedHat" and (ansible_distribution == "Amazon" or ansible_distribution_major_version == "6")

- name: Disable Transparent Huge Pages in Grub 2
  lineinfile: dest=/etc/default/grub
              state=present
              line='GRUB_CMDLINE_LINUX=$GRUB_CMDLINE_LINUX" transparent_hugepage=never"'
  when: "{{ ansible_distribution_major_version|int }} > 6"

- name: Run update-grub in Grub 2
  shell: "{{ update_grub }}"
  when: "{{ ansible_distribution_major_version|int }} > 6"

- name: Disable Transparent Huge Pages until reboot
  shell: echo never > /sys/kernel/mm/transparent_hugepage/enabled && echo never > /sys/kernel/mm/transparent_hugepage/defrag
  ignore_errors: true

- name: Reconfigure resolv.conf domain
  lineinfile: dest={{ resolv_conf }}
              create=yes
              regexp='^domain\s+(?! {{ ansible_domain }} ).*$'
              line='domain {{ ansible_domain }}'
  when: ansible_domain != ""

- name: Reconfigure resolv.conf search
  lineinfile: dest={{ resolv_conf }}
              create=yes
              regexp='^search\s+(?! {{ ansible_domain }} ).*$'
              line='search {{ ansible_domain }}'
  when: ansible_domain != ""

- name: Run resolvconf
  shell: resolvconf -u
  when: ansible_os_family == "Debian"

- name: Configure bonding
  include: bonding.yml
  when: bond_interfaces is defined

- name: Set hosts file
  template: src=hosts.j2 dest=/etc/hosts mode=0644

- name: Include firewall.yml
  include: firewall.yml
  when: configure_firewall or rax_id is defined

- name: Include partitioning.yml
  include: partitioning.yml
  with_flattened:
    - "{{ hadoop_disk|default([]) }}"
    - "{{ datanode_disks|default([]) }}"

- name: Mount hadoop disk under /hadoop
  mount: state=mounted
         src="/dev/{{ hadoop_disk }}1"
         name="/hadoop"
         fstype="{{ data_disks_filesystem }}"
         opts=defaults,noatime
         dump=0
         passno=0
  when: hadoop_disk is defined and hadoop_disk and ansible_devices[hadoop_disk] is defined

- name: Mount datanode disks under /grid/{0..n}
  mount: state=mounted
         src="/dev/{{ item.1 }}1"
         name="/grid/{{ item.0 }}"
         fstype="{{ data_disks_filesystem }}"
         opts=defaults,noatime
         dump=0
         passno=0
  with_indexed_items: "{{ datanode_disks|default([]) }}"
  when: datanode_disks is defined and datanode_disks and ansible_devices[item.1] is defined
